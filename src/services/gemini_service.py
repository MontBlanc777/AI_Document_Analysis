import os
import uuid
from typing import Dict, Any, List, Optional, Tuple
from fastapi import Depends

import google.generativeai as genai

class GeminiService:
    """Service for interacting with the Gemini API"""
    
    def __init__(self):
        """Initialize the Gemini service"""
        # Get API key from environment
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable not set")
        
        # Configure Gemini API
        genai.configure(api_key=api_key)
        
        # Initialize the model
        self.model = genai.GenerativeModel(
            model_name="gemini-2.5-pro-preview-05-06",
            generation_config={
                "temperature": 0.2,
                "top_p": 0.95,
                "top_k": 40,
                "max_output_tokens": 8192,
            },
            safety_settings=[
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            ],
        )
    
    async def generate_content(self, prompt: str, mime_type: Optional[str] = None, data: Optional[str] = None) -> str:
        """Generate content using the Gemini model"""
        try:
            if mime_type and data:
                # Multimodal content generation
                response = self.model.generate_content(
                    [
                        prompt,
                        {"mime_type": mime_type, "data": data}
                    ]
                )
            else:
                # Text-only content generation
                response = self.model.generate_content(prompt)
            
            return response.text
        except Exception as e:
            return f"Error generating content: {str(e)}"
    
    async def analyze_document(self, prompt: str, mime_type: str, data: str) -> str:
        """Analyze a document using the Gemini model"""
        try:
            response = self.model.generate_content(
                [
                    prompt,
                    {"mime_type": mime_type, "data": data}
                ]
            )
            
            return response.text
        except Exception as e:
            return f"Error analyzing document: {str(e)}"
    
    async def chat(self, messages: List[Dict[str, str]]) -> str:
        """Chat with the Gemini model"""
        try:
            # Convert messages to the format expected by Gemini
            chat = self.model.start_chat(history=[])
            
            # Add messages to the chat
            for message in messages:
                if message["role"] == "user":
                    chat.send_message(message["content"])
                # Note: We don't add assistant messages as they are generated by the model
            
            # Get the last response
            last_response = chat.last
            
            return last_response.text
        except Exception as e:
            return f"Error chatting with model: {str(e)}"

# Dependency for getting the Gemini service
def get_gemini_service() -> GeminiService:
    """Dependency to get the Gemini service"""
    return GeminiService()